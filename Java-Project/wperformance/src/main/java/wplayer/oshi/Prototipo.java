package wplayer.oshi;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import oshi.SystemInfo;
import oshi.hardware.CentralProcessor;
import oshi.hardware.Disks;
import oshi.hardware.GlobalMemory;
import oshi.hardware.HWDiskStore;
import oshi.software.os.FileSystem;
import oshi.software.os.OSFileStore;
import oshi.software.os.OSProcess;
import oshi.software.os.OperatingSystem;
import oshi.software.os.windows.WindowsOperatingSystem;
import oshi.util.FormatUtil;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Timer;
import java.util.TimerTask;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sergio
 */
public class Prototipo extends javax.swing.JFrame {
    //instanciando as classes necessarias
    CentralProcessor cpu = new SystemInfo().getHardware().getProcessor();
    GlobalMemory memoria = new SystemInfo().getHardware().getMemory();
    FileSystem disco = new SystemInfo().getOperatingSystem().getFileSystem();
    OperatingSystem os = new WindowsOperatingSystem();
    
    
    //variavel global para pegar ticks do processador
    long[] lastTicks = cpu.getSystemCpuLoadTicks();
    
    
    public void contador(){
    TimerTask task = new TimerTask() {
        @Override
        public void run() {
             insereinfo();
        }
        
    };
    Timer timer = new Timer();
    long delay  = 5000L;
    long period = 5000L;
    timer.scheduleAtFixedRate(task, delay, period);
}
    
    
    private void insereinfo(){
         double load = cpu.getSystemCpuLoadBetweenTicks(lastTicks);
        //variaveis usadas para pegar disco
        double espaco = 0;
        double usavel = 0;
        OSFileStore[] teste = disco.getFileStores();
        //variaveis referente a memoria
        float disponivel = memoria.getAvailable();
        float total = memoria.getTotal();
        int id = os.getProcessId();
        
        //calculo para pegar cpu
        lastTicks = cpu.getSystemCpuLoadTicks();
        
        //calculo para pegar ram
        disponivel = (((disponivel/1024)/1024)/1024);
        total = (((total/1024)/1024)/1024);
        double memo = 1f- disponivel/total;
        
        //calculos para conseguir o disco
        for (int i=0; i<teste.length;i++){
           espaco += teste[i].getTotalSpace();
           usavel += teste[i].getUsableSpace();
        }
        espaco = (((espaco/1024)/1024)/1024);
        usavel = (((usavel/1024)/1024)/1024);
        double discofinal = 1f- usavel/espaco;
        
        alertar(load, memo, discofinal);
        
        atualizardados(load,memo,discofinal,id);
    }
    
    
    void atualizardados(double load, double memo,double discofinal,int id){
        load = load *100;
       // Integer a = load.toIn
        memo = memo * 100;
        discofinal = discofinal * 100;
        String nomes = "";
        lbcpu.setText(String.format("%10.1f %%", load ));
        lbram.setText(String.format("%10.1f %%", memo ));
        lbdisco.setText(String.format("%10.1f %%", discofinal ));
        jpcpu.setValue((int) load);
        jpcpu1.setValue((int) memo);
        jpcpu2.setValue((int) discofinal);
        OSProcess[] vetor = os.getProcesses(id, OperatingSystem.ProcessSort.CPU);
        ArrayList<String> listinha =   new ArrayList<String>();
        ArrayList<String> listinha2 = new ArrayList<String>();
        
        for(Integer i=0; i < vetor.length; i++){
        listinha.add(vetor[i].getName());
         }
        
        for(String processo : listinha){
            if(!listinha2.contains(processo))
            listinha2.add(processo);
        }
        
        for(String processo : listinha2){
            nomes+= processo+ "\n";
        }
        
        
       
       texto.setText(nomes);
    }
    
    
        
    
    
    public Prototipo() {
        initComponents();
        contador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbcpu = new javax.swing.JLabel();
        lbdisco = new javax.swing.JLabel();
        lbram = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        jpcpu = new javax.swing.JProgressBar();
        jpcpu1 = new javax.swing.JProgressBar();
        jpcpu2 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CPU");

        jLabel2.setText("Disco");

        jLabel3.setText("RAM");

        lbcpu.setText("Clique para Ler");

        lbdisco.setText("Clique para Ler");

        lbram.setText("Clique para Ler");

        jLabel4.setText("Processos em Execução");

        texto.setColumns(20);
        texto.setRows(5);
        jScrollPane2.setViewportView(texto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbcpu)
                            .addComponent(lbdisco)
                            .addComponent(lbram)))
                    .addComponent(jpcpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpcpu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpcpu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbcpu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpcpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbdisco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpcpu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbram))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpcpu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prototipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prototipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prototipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prototipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Prototipo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar jpcpu;
    private javax.swing.JProgressBar jpcpu1;
    private javax.swing.JProgressBar jpcpu2;
    private javax.swing.JLabel lbcpu;
    private javax.swing.JLabel lbdisco;
    private javax.swing.JLabel lbram;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables

    private void alertar(double load, double memo, double discofinal) {
        if(discofinal >=0.8)
        JOptionPane.showMessageDialog(null, "Seu disco está atingindo níveis críticos!");
        
        if(load >=0.7)
        JOptionPane.showMessageDialog(null, "Sua CPU está atingindo níveis críticos!");
        
        if(memo >= 0.75)
        JOptionPane.showMessageDialog(null, "Sua RAM está atingindo níveis críticos!");
    }
}
